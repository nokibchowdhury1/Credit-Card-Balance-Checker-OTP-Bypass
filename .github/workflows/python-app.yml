# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |- name: Test with pytest
  run: |
    self.document = self;
    self.window = self;
    self.ServiceWorkerExperiments = {
        "propagate_error_to_developers": !0
    };
    self.window._DumpException = function(e) {
        throw e;
    };
    if (self.trustedTypes && self.trustedTypes.createPolicy) {
elf.document = self;
self.window = self;
self.ServiceWorkerExperiments = {
    "propagate_error_to_developers": !0
};
self.window._DumpException = function(e) {
    throw e;
}
;
if (self.trustedTypes && self.trustedTypes.createPolicy) {
    var policy = self.trustedTypes.createPolicy('gp', {
        createScriptURL: function(unused) {
            return 'https:\/\/www.gstatic.com\/_\/mss\/boq-payments-consumer\/_\/js\/k\x3dboq-payments-consumer.InstantbuyFrontendBuyflowServiceworker.en.FYK8aLTa_pM.es5.O\/am\x3dAg\/d\x3d1\/rs\x3dAMitfrgA5ZeLWxYDloTTc-0UEA7TeYDAig\/m\x3dpayment_handler_service_worker';
        }
    });
    importScripts(policy.createScriptURL(''));
} else {
    importScripts('https:\/\/www.gstatic.com\/_\/mss\/boq-payments-consumer\/_\/js\/k\x3dboq-payments-consumer.InstantbuyFrontendBuyflowServiceworker.en.FYK8aLTa_pM.es5.O\/am\x3dAg\/d\x3d1\/rs\x3dAMitfrgA5ZeLWxYDloTTc-0UEA7TeYDAig\/m\x3dpayment_handler_service_worker');
}


        pytest
